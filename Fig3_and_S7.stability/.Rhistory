op.long$EndYear = as.numeric(gsub(".*Y", "", op.long$year))
get_text <- function(y, x){
lm = lm(y~x)
lm_p = round(summary(lm)$coefficients[2,4],3)
lm_r = round(summary(lm)$adj.r.squared,3)
lm_s = round(summary(lm)$coefficients[2,1],3)
txt = paste(lm_s, " (", lm_r, ", ", lm_p, ")", sep="")
return(txt)
}
plot_op_full <- function(xc, yc, xw, yw){
#  yl=c(min(yc, yw), max(yc, yw))
plot(yw~xw, ylim=c(0,0.3), xlim=c(10,14), ylab="Node persistence", xlab="Year", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="#e7211f")
abline(lm(yw~xw), col="#e7211f")
points(yc~xc, col="#214da0")
abline(lm(yc~xc), col="#214da0")
txt1 = get_text(yw,xw)
txt2 = get_text(yc,xc)
mtext(txt1, side=3, line=0.8, cex=0.5, col="#e7211f")
mtext(txt2, side=3, line=0.1, cex=0.5, col="#214da0")
}
plot_op_zeta6 <- function(xc, yc, xw, yw){
# yl=c(min(yc, yw), max(yc, yw))
plot(yw~xw, ylim=c(0,0.3), xlim=c(10,14), ylab="Node persistence", xlab="Year", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="#e7211f")
points(yc~xc, col="#214da0")
wt = wilcox.test(yw, yc)
mtext(paste(wt$statistic, wt$p.value, sep=","), cex=0.5)
}
par(mfrow=c(2,3))
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))])
plot_op_zeta6(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))])
op.long
get_text <- function(y, x){
lm = lm(y~x)
lm_p = round(summary(lm)$coefficients[2,4],3)
lm_r = round(summary(lm)$adj.r.squared,3)
lm_s = round(summary(lm)$coefficients[2,1],3)
txt = paste(lm_s, " (", lm_r, ", ", lm_p, ")", sep="")
return(txt)
}
plot_op_zeta6 <- function(xc, yc, xw, yw){
# yl=c(min(yc, yw), max(yc, yw))
plot(yw~xw, ylim=c(0,0.3), xlim=c(10,14), ylab="Node persistence", xlab="Year", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="#e7211f")
points(yc~xc, col="#214da0")
wt = wilcox.test(yw, yc)
mtext(paste(wt$statistic, wt$p.value, sep=","), cex=0.5)
}
dev.off()
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))])
rm(list=ls())
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/") # working directory
otutab = read.table("input_files/OTUtable_NetworkedOTUs_AllSamples.txt", sep="\t", header=T, row.names=1)
treatused = read.table("input_files/SampleMap_AllSamples.txt", header=T, sep="\t", row.names=1)
###calculate persistence for each plot
##here persistence= proportion of species persist in  certain number of years
comm<-t(otutab)
sum(row.names(comm)==row.names(treatused))
fake09.N<-comm[1:24,];row.names(fake09.N)<-gsub("S","N",row.names(fake09.N))
comm2<-rbind(fake09.N,comm)
fake09.treat<-treatused[1:24,];row.names(fake09.treat)<-gsub("S","N",row.names(fake09.treat))
fake09.treat$Plot_full_name<-gsub("S","N",fake09.treat$Plot_full_name)
fake09.treat$Plot_ID<-gsub("S","N",fake09.treat$Plot_ID)
treat2<-rbind(fake09.treat,treatused)
treat2$Plot_ID=factor(treat2$Plot_ID)
treat2$Warming[1:48]=treat2$Warming[49:96] # fake warming treatment for Y09
test1<-split(data.frame(comm2),treat2$Plot_ID)
years=c("Y09","Y10","Y11","Y12","Y13","Y14")
l <- rep(list(0:1), 6)
allcombines<-expand.grid(l)
allcombines<-allcombines[c(4,7,13,25,49, 8,15,29,57, 16,31,61, 32,63, 64),] # only select adjacent years
allcombines<-t(allcombines)
test<-sapply(test1, function(x){
test3<-sapply(1:ncol(allcombines),
function(i){
coms<-allcombines[,i]*x
total.sp<-sum(colSums(coms>0)>0)
persist.sp<-sum(colSums(coms>0)==sum(allcombines[,i]))
prop=persist.sp/total.sp
names(prop)=paste0(years[allcombines[,i]>0],collapse="")
prop
})
test3
})
test
persist.result<-t(test)
persist.result
dim(treat2)
rownames(persist.result)
treat2$Plot_ID
match(rownames(persist.result),treat2$Plot_ID)
output=data.frame(treat2[match(rownames(persist.result),treat2$Plot_ID),1:5,drop=FALSE],persist.result,stringsAsFactors = FALSE)
warnings()
output
treat2
warnings()
treat2
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/") # working directory
otutab = read.table("input_files/OTUtable_NetworkedOTUs_AllSamples.txt", sep="\t", header=T, row.names=1)
treatused = read.table("input_files/SampleMap_AllSamples.txt", header=T, sep="\t", row.names=1)
###calculate persistence for each plot
##here persistence= proportion of species persist in  certain number of years
comm<-t(otutab)
sum(row.names(comm)==row.names(treatused))
fake09.N<-comm[1:24,];row.names(fake09.N)<-gsub("S","N",row.names(fake09.N))
comm2<-rbind(fake09.N,comm)
fake09.treat<-treatused[1:24,];row.names(fake09.treat)<-gsub("S","N",row.names(fake09.treat))
fake09.treat$Plot_full_name<-gsub("S","N",fake09.treat$Plot_full_name)
fake09.treat$Plot_ID<-gsub("S","N",fake09.treat$Plot_ID)
treat2<-rbind(fake09.treat,treatused)
treat2$Plot_ID=factor(treat2$Plot_ID)
treat2
treat2[$Warming]49:96,]
treat2$Warming[49:96,]
treat2$Warming[c(49:96),]
treat2$Warming
treat2$Warming[c(49:96)]
treat2[c(49:96),]
treat2[match(rownames(persist.result),treat2$Plot_ID)
]
treat2$Plot_ID[49:96]
treat2$Plot_ID[1:48]
treat2$Plot_ID[49:96]
match(treat2$Plot_ID[1:48], treat2$Plot_ID[49:96])
treat2$Warming[1:48]<-treat2$Warming[49:96][match(treat2$Plot_ID[1:48], treat2$Plot_ID[49:96])]
persist.result<-t(test)
output=data.frame(treat2[match(rownames(persist.result),treat2$Plot_ID),1:5,drop=FALSE],persist.result,stringsAsFactors = FALSE)
names(output)<-paste(c(rep("",5),
rep("Zeta2",5),
rep("Zeta3",4),
rep("Zeta4",3),
rep("Zeta5",2),
rep("Zeta6",1)), names(output), sep="")
head(output)
## plot Figure S7fghij - multiorder persistence. Adapted from the concept of Zeta diveristy in Hui and McGeoch American Naturalist 2014.
op.mo = output
op.long <- gather(op.mo, year, op, Zeta2Y09Y10:Zeta6Y09Y10Y11Y12Y13Y14, factor_key=TRUE)
op.long$EndYear = as.numeric(gsub(".*Y", "", op.long$year))
get_text <- function(y, x){
lm = lm(y~x)
lm_p = round(summary(lm)$coefficients[2,4],3)
lm_r = round(summary(lm)$adj.r.squared,3)
lm_s = round(summary(lm)$coefficients[2,1],3)
txt = paste(lm_s, " (", lm_r, ", ", lm_p, ")", sep="")
return(txt)
}
plot_op_full <- function(xc, yc, xw, yw){
#  yl=c(min(yc, yw), max(yc, yw))
plot(yw~xw, ylim=c(0,0.3), xlim=c(10,14), ylab="Node persistence", xlab="Year", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="#e7211f")
abline(lm(yw~xw), col="#e7211f")
points(yc~xc, col="#214da0")
abline(lm(yc~xc), col="#214da0")
txt1 = get_text(yw,xw)
txt2 = get_text(yc,xc)
mtext(txt1, side=3, line=0.8, cex=0.5, col="#e7211f")
mtext(txt2, side=3, line=0.1, cex=0.5, col="#214da0")
}
plot_op_zeta6 <- function(xc, yc, xw, yw){
# yl=c(min(yc, yw), max(yc, yw))
plot(yw~xw, ylim=c(0,0.3), xlim=c(10,14), ylab="Node persistence", xlab="Year", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="#e7211f")
points(yc~xc, col="#214da0")
wt = wilcox.test(yw, yc)
mtext(paste(wt$statistic, wt$p.value, sep=","), cex=0.5)
}
par(mfrow=c(2,3))
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))])
plot_op_zeta6(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))])
par(mfrow=c(2,3))
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta2", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta2", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta3", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta3", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta4", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta4", op.long$year))])
plot_op_full(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta5", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta5", op.long$year))])
plot_op_zeta6(xc=op.long$EndYear[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
yc=op.long$op[intersect(which(op.long$Warming=="N"), grep("Zeta6", op.long$year))],
xw=op.long$EndYear[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))],
yw=op.long$op[intersect(which(op.long$Warming=="W"), grep("Zeta6", op.long$year))])
colors = c(rep("#214da0",5), rep("#e7211f", 5))
syms = c(1,1,1,1,1, 19,19,19,19,19)
plot_cs <- function(yw, yc, ebw, ebc){
x=c(1,2,3,4,5)
yl=c(min(c(yw-ebw,yc-ebc)), max(c(yw+ebw,yc+ebc)))
plot(yw~x, ylim=yl, ylab="Compositional stability", xlab="Year of warming", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="red")
abline(lm(yw~x), col="red")
arrows(x, yw-ebw, x, yw+ebw, length=0.05, angle=90, code=3, col="red")
points(yc~x, col="blue")
abline(lm(yc~x), lty=2, col="blue")
arrows(x, yc-ebc, x, yc+ebc, length=0.05, angle=90, code=3, col="blue")
txt1 = get_text(yw,x)
txt2 = get_text(yc,x)
mtext(txt1, side=3, line=0.8, cex=0.5, col="red")
mtext(txt2, side=3, line=0.1, cex=0.5, col="blue")
}
zeta2 = op.long[grep("Zeta2", op.long$year),]
zeta2
zeta2_means = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=mean)
zeta2_sds = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=sd)
zeta2 = op.long[grep("Zeta2", op.long$year),]
zeta2 = op.long[grep("Zeta2", op.long$year),]
zeta2 = op.long[grep("Zeta2", op.long$year),]
zeta2_means = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=mean)
zeta2_sds = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=sd)
zeta2_means = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=mean)
zeta2_sds = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=sd)
plot_cs(yw=zeta2_means$x[which(zeta2_means$Group.1=="W")],
yc=zeta2_means$x[which(zeta2_means$Group.1=="N")],
ebw=zeta2_sds$x[which(zeta2_sds$Group.1=="W")],
ebc=zeta2_sds$x[which(zeta2_sds$Group.1=="N")])
colors = c(rep("#214da0",5), rep("#e7211f", 5))
syms = c(1,1,1,1,1, 19,19,19,19,19)
plot_op <- function(yw, yc, ebw, ebc){
x=c(1,2,3,4,5)
yl=c(min(c(yw-ebw,yc-ebc)), max(c(yw+ebw,yc+ebc)))
plot(yw~x, ylim=yl, ylab="Observed Node Persistence", xlab="Year of warming", pch=19, cex.axis=0.7, cex.lab=0.7, tck=-0.03, col="red")
abline(lm(yw~x), col="red")
arrows(x, yw-ebw, x, yw+ebw, length=0.05, angle=90, code=3, col="red")
points(yc~x, col="blue")
abline(lm(yc~x), lty=2, col="blue")
arrows(x, yc-ebc, x, yc+ebc, length=0.05, angle=90, code=3, col="blue")
txt1 = get_text(yw,x)
txt2 = get_text(yc,x)
mtext(txt1, side=3, line=0.8, cex=0.5, col="red")
mtext(txt2, side=3, line=0.1, cex=0.5, col="blue")
}
zeta2 = op.long[grep("Zeta2", op.long$year),]
zeta2_means = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=mean)
zeta2_sds = aggregate(zeta2$op, list(zeta2$Warming, zeta2$EndYear), FUN=sd)
plot_op(yw=zeta2_means$x[which(zeta2_means$Group.1=="W")],
yc=zeta2_means$x[which(zeta2_means$Group.1=="N")],
ebw=zeta2_sds$x[which(zeta2_sds$Group.1=="W")],
ebc=zeta2_sds$x[which(zeta2_sds$Group.1=="N")])
rm(list=ls())
find_overlap = function(mods, bigtable){
vec1 = bigtable[,which(names(bigtable)==mods[1])]
vec2 = bigtable[,which(names(bigtable)==mods[2])]
return(sum(vec1*vec2==1))
}
find_only_in_1 = function(mods, bigtable){
vec1 = bigtable[,which(names(bigtable)==mods[1])]
vec2 = bigtable[,which(names(bigtable)==mods[2])]
return(sum(vec1==1 & vec2==0))
}
find_only_in_2 = function(mods, bigtable){
vec1 = bigtable[,which(names(bigtable)==mods[1])]
vec2 = bigtable[,which(names(bigtable)==mods[2])]
return(sum(vec2==1 & vec1==0))
}
find_N = function(mods, mapping, bigtable){
nwk1 = bigtable[, which(mapping$year_warming== mapping $year_warming[which(mapping $module==mods[1])])]
nwk2 = bigtable[, which(mapping$year_warming== mapping $year_warming[which(mapping $module==mods[2])])]
match_nwk1_nwk2 = sum((rowSums(nwk1) + rowSums(nwk2))>0)
return(match_nwk1_nwk2)
}
fisher_test = function(x){
contingency_table <- matrix(unlist(matrix(data.frame(x[3:6]), nrow=2)), nrow=2)
test_p = fisher.test(contingency_table, alternative = "greater")$p.value
return(test_p)
}
setwd('/Users/maggieyuan/Documents/!annual_network/GitHub/ExtendedDataFig3.module_preservation/')
node = read.table("input_file/NetworkNodeTable_AllNetworks.txt", header=T)
node = read.table("input_file/NetworkNodeTable_AllNetworks.txt", header=T, sep="\t")
node$module = paste(node$year_trt, "_M", node$No..module, sep="")
node_table = node[,c(1,17,18)]
node_table
module_list = unique(node_table$module)
module_list
mytable = data.frame(matrix(NA, nrow=0, ncol=length(module_list)))
colnames(mytable) = module_list
to_add = data.frame(matrix(NA, nrow=1, ncol=length(module_list)))
colnames(to_add) = module_list
map = data.frame(module=module_list, year=gsub("_.*", "", module_list), year_warming=gsub("_M.*", "", module_list))
map$warming=gsub(".*_", "", map$year_warming)
for (i in 1:nrow(node_table))
{
if (node_table$Name[i] %in% row.names(mytable)){
mytable[which(row.names(mytable)== node_table$Name[i]), which(names(mytable)== node_table$module[i])] <-1
}else{
mytable = rbind(mytable, to_add)
rownames(mytable)[nrow(mytable)] <-as.character(node_table$Name[i])
mytable[nrow(mytable), which(names(mytable)== node_table$module[i])] <-1
}
}
mytable[is.na(mytable)]<-0
nrow(node_table)
sum(mytable)
dim(mytable)
mytable[1:10,1:10]
mytable_kp = mytable[,-which(colSums(mytable)<5)]
map_kp = map[-which(colSums(mytable)<5),]
dim(mytable_kp)
network_pair_c = t(combn(unique(grep("control", map_kp $year_warming, value=T)), m=2))
network_pair_w = t(combn(unique(grep("warm", map_kp $year_warming, value=T)), m=2))
# 16S #
network_pair_year = matrix(c("2010_control", "2011_control", "2012_control", "2013_control", "2014_control", "2010_warming", "2011_warming", "2012_warming", "2013_warming", "2014_warming"), ncol=2)
network_pair = rbind(network_pair_c, network_pair_w, network_pair_year)
total_mod_pairs = matrix(NA, nrow=nrow(network_pair), ncol=3)
for (i in 1:nrow(network_pair))
{
module_pair = as.matrix(expand.grid(map_kp $module[which(map_kp $year_warming==network_pair[i,1])], map_kp $module[which(map_kp $year_warming==network_pair[i,2])]))
total_mod_pairs[i,] = c(network_pair[i,], nrow(module_pair))
}
total_mod_pairs
sig_mod_pairs = matrix(NA, nrow=0, ncol=4)
sig_detailed_table = c("module1", "module2", "both", "P1A2", "P2A1", "A1A2", "p_raw", "p_adj")
for (i in 1:nrow(network_pair))
{
module_pair = as.matrix(expand.grid(map_kp $module[which(map_kp $year_warming==network_pair[i,1])], map_kp $module[which(map_kp $year_warming==network_pair[i,2])]))
overlap = apply(module_pair, 1, FUN= find_overlap, bigtable= mytable_kp)
only1 = apply(module_pair, 1, FUN= find_only_in_1, bigtable= mytable_kp)
only2 = apply(module_pair, 1, FUN= find_only_in_2, bigtable= mytable_kp)
denominator = apply(module_pair, 1, FUN= find_N, mapping=map, bigtable= mytable)
none = denominator-(overlap + only1 + only2)
count_table = data.frame(module1 = module_pair[,1], module2 = module_pair[,2], Both=overlap, P1A2=only1, P2A1=only2, A1A2=none)
p_raw=c()
for (tt in 1:nrow(count_table))
{
x=count_table[tt,]
p = fisher_test(x)
p_raw = c(p_raw, p)
}
count_table$p_raw = p_raw
count_table$p_adj = p.adjust(count_table$p_raw, method = "bonferroni")
network1 = network_pair[i,1]
network2 = network_pair[i,2]
sig_count = sum(count_table$p_adj<=0.05)
if(sig_count>0){
sig_pairs_table = count_table[which(count_table$p_adj<=0.05),c(1:2)]
sig_pairs_linked = paste(sig_pairs_table[,1], "-", sig_pairs_table[,2], sep="")
sig_pairs = paste(sig_pairs_linked, collapse=",")
sig_pairs_count_table = count_table[which(count_table$p_adj<=0.05),]
row.names(sig_pairs_count_table) = sig_pairs_linked
}else{
sig_pairs = "None"
}
add_one_row = c(network1, network2, sig_count, sig_pairs)
sig_mod_pairs = rbind(sig_mod_pairs, add_one_row)
sig_detailed_table = rbind(sig_detailed_table, sig_pairs_count_table)
print(i)
}
sig_mod_pairs
dim(sig_detailed_table)
head(sig_detailed_table)
sig_detailed_table[-1,]
?fisher.test
write.table(sig_detailed_table[-1,], "preserved_module_pairs.txt", sep="\t")
rm(list=ls())
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/ExtendedDataFig5/")
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/ExtendedDataFig5.constancy/")
edge_prop = read.table("input_file/NetworkEdgeTable_AllNetworks.txt", sep="\t", header=T)
# "16S_all_edge_table_09to14.txt" contains all the edges from all the networks
edge_prop$edge_sign = paste(edge_prop$edge,edge_prop$V5,sep="_")
total_e = length(unique(edge_prop$edge))
total_e_sign = length(unique(edge_prop$edge_sign)) ##note: signs are consistant
edge_table = data.frame(matrix(NA, nrow=total_e, ncol=11))
row.names(edge_table) = unique(edge_prop$edge)
names(edge_table) = unique(edge_prop$year_trt)
for (i in 1:ncol(edge_table))
{
edge_prop_year = edge_prop[which(edge_prop$year_trt == names(edge_table[i])),]
edge_table[which(rownames(edge_table) %in% edge_prop_year$edge),i] = 1
}
edge_table[is.na(edge_table)]<-0
head(edge_table)
edge_table$avg_c = rowMeans(edge_table[,c(1,2,4,6,8,10)])
edge_table$sd_c = apply(edge_table[,c(1,2,4,6,8,10)],1,FUN=sd)
edge_table$avg_w = rowMeans(edge_table[,c(1,3,5,7,9,11)])
edge_table$sd_w = apply(edge_table[,c(1,3,5,7,9,11)],1,FUN=sd)
edge_table$constancy_c = edge_table$avg_c/edge_table$sd_c
edge_table$constancy_w = edge_table$avg_w/edge_table$sd_w
edge_table$constancy_c[is.infinite(edge_table$constancy_c)] = NA
edge_table$constancy_w[is.infinite(edge_table$constancy_w)] = NA
v_constancy_c = edge_table$constancy_c[which(!is.na(edge_table$constancy_c))]
n_constancy_c = sum(!is.na(edge_table$constancy_c))
avg_constancy_c = mean(edge_table$constancy_c, na.rm=T)
sd_constancy_c = sd(edge_table$constancy_c, na.rm=T)
v_constancy_w = edge_table$constancy_w[which(!is.na(edge_table$constancy_w))]
n_constancy_w = sum(!is.na(edge_table$constancy_w))
avg_constancy_w = mean(edge_table$constancy_w, na.rm=T)
sd_constancy_w = sd(edge_table$constancy_w, na.rm=T)
t.test(v_constancy_w, v_constancy_c)
# plot Extended Data Fig. 5d - link constancy
df_lc_uw = data.frame(Treatment = c("control", "warming"), Link_constancy = c(avg_constancy_c, avg_constancy_w), se = c(sd_constancy_c/sqrt(n_constancy_c), sd_constancy_w/sqrt(n_constancy_w)))
ggplot(df_lc_uw, aes(x=Treatment, y= Link_constancy)) +
geom_bar(stat="identity", fill= c("#214da0", "#e7211f"), width = 0.5) +
geom_errorbar(aes(ymin = Link_constancy - se, ymax = Link_constancy + se), width=0.2) +
labs(x="Treatment", y = "Unweighted link constancy") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=0.6),
legend.position="none")
library(ggplot2)
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/ExtendedDataFig5.constancy/")
tb = read.table("input_file/NetworkNodeTable_AllNetworks.txt", header=T, sep="\t")
head(tb)
nwlist = unique(tb$year_trt)
clist = nwlist[c(1,2,4,6,8,10)]
wlist = nwlist[c(1,3,5,7,9,11)]
c2 = combn(c(1:6), 2)
c3 = combn(c(1:6), 3)
c4 = combn(c(1:6), 4)
c5 = combn(c(1:6), 5)
c6 = combn(c(1:6), 6)
overlap <- function(id, tb, list){
otu_overlap = tb$Name[which(tb$year_trt==list[id[1]])]
for (i in 2:length(id)){
otu = tb$Name[which(tb$year_trt==list[id[i]])]
otu_overlap = intersect(otu_overlap, otu)
}
return(length(otu_overlap))
}
# control
overlap2 = apply(c2, 2, FUN=overlap, tb=tb, list=clist)
overlap3 = apply(c3, 2, FUN=overlap, tb=tb, list=clist)
library(ggplot2)
library(gridExtra)
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/ExtendedDataFig5.constancy/")
otu = read.table("input_file/OTUtable_NetworkedOTUs_AllSamples.txt", sep="\t", header=T, row.names=1)
map = read.table("input_file/SampleMap_AllSamples.txt", sep="\t", header=T)
id_09 = rep(which(map$Year == "Y09"), each=2)
id_10 = which(map$Year == "Y10")
id_11 = which(map$Year == "Y11")
id_12 = which(map$Year == "Y12")
id_13 = which(map$Year == "Y13")
id_14 = which(map$Year == "Y14")
# contributor: Linwei Wu
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/") # working directory
otutab = read.table("input_file/OTUtable_NetworkedOTUs_AllSamples.txt", sep="\t", header=T, row.names=1)
treatused = read.table("input_file/SampleMap_AllSamples.txt", header=T, sep="\t", row.names=1)
# contributor: Linwei Wu
library(igraph)
source("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stablity/info.centrality.R")
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stablity/")
#### get graph ####
## you can 1) read in your own graph,
## 2) construct a graph from OTU table, or
## 3) read in the correlation matrix downloaded from MENAP to construct the graph.
## 2) construct a graph from OTU table
otutab<-read.table("input_file/OTUtable_AllOTUs_Y14_W.txt",header = T,row.names=1,sep="\t")
otutab[is.na(otutab)]<-0
##keep 12 otus
counts<-rowSums(otutab>0)
otutab<-otutab[counts>=12,]
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/") # working directory
# contributor: Daliang Ning
wd="/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/"
com.file="input_file/OTUtable_NetworkedOTUs_AllSamples.txt"
treat.file="input_file/SampleMap_AllSamples.txt"
# contributor: Linwei Wu
library(igraph)
source("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/info.centrality.R")
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/")
## 2) construct a graph from OTU table
otutab<-read.table("input_file/OTUtable_AllOTUs_Y14_W.txt",header = T,row.names=1,sep="\t")
otutab[is.na(otutab)]<-0
setwd("/Users/maggieyuan/Documents/!annual_network/GitHub/Fig3_and_S7.stability/")
##read otu table
otutab<-read.table("input_file/OTUtable_AllOTUs_Y14_W.txt",header = T,row.names=1,sep="\t")
otutab[is.na(otutab)]<-0
##keep 12 otus
counts<-rowSums(otutab>0)
otutab<-otutab[counts>=12,]
